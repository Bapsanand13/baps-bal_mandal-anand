name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
    
    - name: Install dependencies
      run: |
        npm run install:all
    
    - name: Run linting
      run: |
        npm run lint
    
    - name: Run tests
      run: |
        npm test
      env:
        NODE_ENV: test
        MONGODB_URI: ${{ secrets.MONGODB_URI_TEST }}
    
    - name: Build applications
      run: |
        npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: |
          frontend/dist/
          admin/dist/
          backend/

  security:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
    
    - name: Install dependencies
      run: npm run install:all
    
    - name: Run security audit
      run: |
        npm audit --audit-level=moderate
        cd backend && npm audit --audit-level=moderate
        cd ../frontend && npm audit --audit-level=moderate
        cd ../admin && npm audit --audit-level=moderate

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
    
    - name: Install dependencies
      run: npm run install:all
    
    - name: Build applications
      run: npm run build
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment"
        # Add your staging deployment commands here
        # Example: Deploy to Heroku staging app
        # heroku container:push web -a your-staging-app
        # heroku container:release web -a your-staging-app

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
    
    - name: Install dependencies
      run: npm run install:all
    
    - name: Build applications
      run: npm run build
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment"
        # Add your production deployment commands here
        # Example: Deploy to Heroku production app
        # heroku container:push web -a your-production-app
        # heroku container:release web -a your-production-app

  notify:
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy-production.result }}" == "success" ]; then
          echo "Production deployment successful!"
          # Add notification logic here (Slack, email, etc.)
        else
          echo "Production deployment failed!"
          # Add failure notification logic here
        fi 